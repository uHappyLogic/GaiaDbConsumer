#!/usr/bin/python
import argparse
import multiprocessing
from distutils.util import strtobool


def configure_argparse():
    ap = argparse.ArgumentParser()
    ap.add_argument("-p", "--password", required=True, type=str,
                    help="database password")
    ap.add_argument("-u", "--user", required=True, type=str,
                    help="database user")
    ap.add_argument("-n", "--db_name", required=True, type=str,
                    help="database name")
    ap.add_argument("-c", "--workers", required=True, type=int,
                    help="count of workers run")
    ap.add_argument("-r", "--ratio", required=True, type=float,
                    help="Ratio of qualified stars saved. =1 mean that every qualified star will be saved")

    ap.add_argument("--host", required=False, type=str,
                    help="database host", default="127.0.0.1")
    ap.add_argument("--port", required=False, type=str,
                    help="database port", default="5432")

    return ap


def create_config_file(args):
    cpu_count = multiprocessing.cpu_count()

    if int(args.workers) > cpu_count:
        if not strtobool(input(
                "It is recommended to run less workers than there are CPUs[{}]. "
                "Are you sure you want to run {} workers [Y/n]?\n"
                .format(cpu_count, args.workers))):
            return

    with open('GaiaHelpers\\LocalConfig.py', 'w') as local_config:
        local_config.write((
            "# This file is generated by ./Setup.py\n"
            "class LocalConfig:\n"
            "\n"
            "    @staticmethod\n"
            "    def initialized():\n"
            "        pass\n"
            "\n"
            "    @staticmethod\n"
            "    def get_db_name():\n"
            "        return '{}'\n"
            "\n"
            "    @staticmethod\n"
            "    def get_db_user():\n"
            "        return '{}'\n"
            "\n"
            "    @staticmethod\n"
            "    def get_db_host():\n"
            "        return '{}'\n"
            "\n"
            "    @staticmethod\n"
            "    def get_db_port():\n"
            "        return '{}'\n"
            "\n"
            "    @staticmethod\n"
            "    def get_db_password():\n"
            "        return '{}'\n"
            "\n"
            "    @staticmethod\n"
            "    def get_workers_count():\n"
            "        return {}\n"
            "\n"
            "    @staticmethod\n"
            "    def get_star_ratio():\n"
            "        return {}\n"
            ).format(
                args.db_name,
                args.user,
                args.host,
                int(args.port),
                args.password,
                int(args.workers),
                args.ratio
            ))


if __name__ == "__main__":
    create_config_file(
        configure_argparse().parse_args()
    )
